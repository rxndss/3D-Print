##===========================================================================
##============================= Klicky - Macros =============================
##===========================================================================
[gcode_macro _PROBE_VARIABLES]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:

[gcode_macro _KLICKY_CHECK_VARIABLES_VERSION]
gcode:
    {% set version = printer["gcode_macro _USER_VARIABLES"].version|default(0) %}

    {% if version != 1 %}
        { action_raise_error("Please update your klicky variables, there are some functionality changes") }
    {% endif %}

[gcode_macro _KLICKYDEBUG]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer["gcode_macro _USER_VARIABLES"].debug|default(False) %}
    
    {% if debug %}
        { action_respond_info(message) }
    {% endif %}    

[gcode_macro _EXIT_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _USER_VARIABLES"].travel_speed %}

    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _ENTRY_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move_accel = printer["gcode_macro _USER_VARIABLES"].move_accel|default(1000) %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _HOMING_VARIABLES]
gcode:
    {% set reset  = params.RESET|default(0) %}
    {% if reset %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    {% endif %}

##===========================================================================
##=========================== Attach Probe - Lock ===========================
##===========================================================================
[gcode_macro _ATTACH_PROBE_LOCK]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    ATTACH_PROBE
    _PROBE_LOCK

##===========================================================================
##============================ Dock Probe - Lock ============================
##===========================================================================
[gcode_macro _DOCK_PROBE_UNLOCK]
description: Docks Klicky Probe even if it was locked
gcode:
    _PROBE_UNLOCK
    DOCK_PROBE

##===========================================================================
##=============================== Unlock Probe ==============================
##===========================================================================
[gcode_macro _PROBE_UNLOCK]
description: Unlocks Klicky Probe state
gcode:
    _KLICKYDEBUG msg="_PROBE_LOCK setting probe_lock variable to False"
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }

##===========================================================================
##================================ Lock Probe ===============================
##===========================================================================
[gcode_macro _PROBE_LOCK]
description: Locks Klicky Probe state
gcode:
    _KLICKYDEBUG msg="_PROBE_LOCK setting probe_lock variable to True"
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }

##===========================================================================
##============================ Klicky Dock Servo ============================
##===========================================================================
[gcode_macro _DEPLOYKLICKYDOCK]
description: Deploys Klicky servo-controlled dock
gcode:
    {% set enable_dock_servo = printer["gcode_macro _USER_VARIABLES"].enable_dock_servo|default(False) %}
    {% set servo_delay = printer["gcode_macro _USER_VARIABLES"].servo_delay|default(1000) %}
    {% set servo_name = printer["gcode_macro _USER_VARIABLES"].servo_name %}
    {% set servo_deploy = printer["gcode_macro _USER_VARIABLES"].servo_deploy|default(360) %}

    #wait for all the moves to complete
    M400
    {% if enable_dock_servo != False %}
        _KLICKYDEBUG msg="_DEPLOYKLICKYDOCK Klicky servo configuration enabled"
        {% if servo_deploy == 360 %}
            { action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
        {% endif %}
        _KLICKYDEBUG msg="_DEPLOYKLICKYDOCK SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"
        SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
        M400
        G4 P{servo_delay|int}
        _KLICKYDEBUG msg="_DEPLOYKLICKYDOCK SET_SERVO SERVO={servo_name|string} WIDTH=0"
        SET_SERVO SERVO={servo_name|string} WIDTH=0
    {% elif printer["gcode_macro _DeployDock"] is defined %}
        _KLICKYDEBUG msg="_DEPLOYKLICKYDOCK calling _DeployDock"	
        _DeployDock
    {% endif %}

[gcode_macro _RETRACTKLICKYDOCK]
description: Retracts Klicky servo-controlled dock
gcode:
    {% set enable_dock_servo = printer["gcode_macro _USER_VARIABLES"].enable_dock_servo|default(False) %}
    {% set servo_delay = printer["gcode_macro _USER_VARIABLES"].servo_delay|default(1000) %}
    {% set servo_name = printer["gcode_macro _USER_VARIABLES"].servo_name %}
    {% set servo_retract = printer["gcode_macro _USER_VARIABLES"].servo_retract|default(360) %}
    
    #wait for all the moves to complete
    M400
    {% if enable_dock_servo != False %}
        _KLICKYDEBUG msg="_RETRACTKLICKYDOCK Klicky servo configuration enabled"
        {% if servo_retract == 360 %}
            { action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
        {% endif %}
        _KLICKYDEBUG msg="_RETRACTKLICKYDOCK SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"
        SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
        M400
        G4 P{servo_delay|int}
        _KLICKYDEBUG msg="_RETRACTKLICKYDOCK SET_SERVO SERVO={servo_name|string} WIDTH=0"
        SET_SERVO SERVO={servo_name|string} WIDTH=0
    {% elif printer["gcode_macro _RetractDock"] is defined %}
        _KLICKYDEBUG msg="_RETRACTKLICKYDOCK calling _RetractDock"	
        _RetractDock
    {% endif %}


##===========================================================================
##=============================== Attach Probe ==============================
##===========================================================================
[gcode_macro ATTACH_PROBE]
description: Attaches Klicky Probe
gcode:
    # See if the position should be restored after the attach
    {% set goback  = params.BACK|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set dockmove_x = printer["gcode_macro _USER_VARIABLES"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _USER_VARIABLES"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _USER_VARIABLES"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _USER_VARIABLES"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _USER_VARIABLES"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _USER_VARIABLES"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _USER_VARIABLES"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _USER_VARIABLES"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _USER_VARIABLES"].attachmove_z|default(0) %}
    {% set attachmove2_x = printer["gcode_macro _USER_VARIABLES"].attachmove2_x|default(0) %}
    {% set attachmove2_y = printer["gcode_macro _USER_VARIABLES"].attachmove2_y|default(0) %}
    {% set attachmove2_z = printer["gcode_macro _USER_VARIABLES"].attachmove2_z|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _USER_VARIABLES"].enable_z_hop %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _USER_VARIABLES"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _USER_VARIABLES"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _ENTRY_POINT function=ATTACH_PROBE

    # If x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    _KLICKYDEBUG msg="ATTACH_PROBE Axis homed"	
    
    # If probe not attached and locked
    {% elif not probe_attached and not probe_lock %}
        _KLICKYDEBUG msg="ATTACH_PROBE going to attach probe"	
        {% if verbose %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        STATUS_BUSY

        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            _KLICKYDEBUG msg="ATTACH_PROBE Z not homed, setting position as X=Y=Z=0"
            SET_KINEMATIC_POSITION Z=0
            {% if not enable_z_hop %} # Disables safe_z
                _KLICKYDEBUG msg="ATTACH_PROBE z_hop disabled"
                {% set safe_z = 0 %}
            {% endif %}
        {% endif %}

        # Prior to saving actual position, check if its necessary to move to a safe Z
        # that has enought overhead for the attached probe
        {% if printer.toolhead.position.z < safe_z %}
            _KLICKYDEBUG msg="ATTACH_PROBE toolhead too low, raising it by {safe_z}mm"
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        {% if not 'z' in printer.toolhead.homed_axes %} #duplicate??
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero, duplicate?") }
            {% endif %}
            _KLICKYDEBUG msg="ATTACH_PROBE Z not homed, setting position as X=Y=Z=0"
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if printer.toolhead.position.z < safe_z %} #duplicate??
            _KLICKYDEBUG msg="ATTACH_PROBE toolhead too low, raising it by {safe_z}mm, duplicate?"
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _UMBILICAL_PATH

        _ENTRY_POINT function=Attach_Probe_intern

        # Probe entry location
        _KLICKYDEBUG msg="ATTACH_PROBE moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"
        G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="ATTACH_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"
            G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
            _KLICKYDEBUG msg="ATTACH_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
            G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
        {% endif %}

        # if necessary do some actions before moving the toolhead to dock
        _DEPLOYKLICKYDOCK


        # Drop Probe to Probe location
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="ATTACH_PROBE moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
            G0 Z{docklocation_z} F{dock_feedrate}
        {% endif %}
        _KLICKYDEBUG msg="ATTACH_PROBE moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"
        G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
        _KLICKYDEBUG msg="ATTACH_PROBE moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
        G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}

        # Probe Attached
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="ATTACH_PROBE moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"
            G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
        {% endif %}
        _KLICKYDEBUG msg="ATTACH_PROBE moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"
        G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}

        # if necessary do some actions after attaching the probe
        _RETRACTKLICKYDOCK
        
        ## Go to Z safe distance
        {% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
          _KLICKYDEBUG msg="ATTACH_PROBE moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
          G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _PARK_TOOLHEAD

        _CHECKPROBE action=attach

        _EXIT_POINT function=Attach_Probe_intern move={goback}
        STATUS_READY

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _KLICKYDEBUG msg="ATTACH_PROBE probe locked not attaching probe"
        _CHECKPROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _KLICKYDEBUG msg="ATTACH_PROBE probe already attached, doing nothing"
        _CHECKPROBE action=query

    {% endif %}

    _EXIT_POINT function=ATTACH_PROBE


##===========================================================================
##================================ Dock Probe ===============================
##===========================================================================
[gcode_macro DOCK_PROBE]
description: Docks Klicky Probe
gcode:
    # See if the position should be restored after the dock
    {% set goback  = params.back|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set dockmove_x = printer["gcode_macro _USER_VARIABLES"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _USER_VARIABLES"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _USER_VARIABLES"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _USER_VARIABLES"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _USER_VARIABLES"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _USER_VARIABLES"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _USER_VARIABLES"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _USER_VARIABLES"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _USER_VARIABLES"].attachmove_z|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _USER_VARIABLES"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _USER_VARIABLES"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    # If axis aren't homed, fail
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KLICKYDEBUG msg="DOCK_PROBE Axis homed"

    _ENTRY_POINT function=DOCK_PROBE

    # If probe not attached and not locked
    {% if probe_attached and not probe_lock %}
        _KLICKYDEBUG msg="DOCK_PROBE going to dock probe"	
        {% if verbose %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        STATUS_BUSY

        {% if printer.toolhead.position.z < safe_z %}
            _KLICKYDEBUG msg="DOCK_PROBE toolhead too low, raising it to {safe_z}mm"
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _UMBILICAL_PATH

        # Probe entry location
        _KLICKYDEBUG msg="DOCK_PROBE moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"
        G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="DOCK_PROBE moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"
            G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
        {% endif %}

        # if necessary do some actions before moving the toolhead to dock
        _DEPLOYKLICKYDOCK

        # Drop Probe to Probe location
        _KLICKYDEBUG msg="DOCK_PROBE moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"
        G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="ATTACH_PROBE moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"
            G0 Z{docklocation_z} F{dock_feedrate}
        {% endif %}

        # Probe decoupling
        {% if docklocation_z != -128 %}
            _KLICKYDEBUG msg="DOCK_PROBE moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"
            G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
        {% endif %}
        _KLICKYDEBUG msg="DOCK_PROBE moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"
        G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
        
        # if necessary do some actions after attaching the probe
        _RETRACTKLICKYDOCK

        #Do an extra move away
        _KLICKYDEBUG msg="DOCK_PROBE moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"
        G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}

        ## Go to Z safe distance
        {% if ((printer.toolhead.position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
          _KLICKYDEBUG msg="DOCK_PROBE moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.toolhead.position.z}"
          G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _PARK_TOOLHEAD

        G4 P1000
        _CHECKPROBE action=dock
        STATUS_READY

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked") }
        {% endif %}

        # Probe docked, do nothing
        _KLICKYDEBUG msg="DOCK_PROBE probe locked not docking probe"
        _CHECKPROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already docked") }
        {% endif %}

        # Probe docked, do nothing
        _KLICKYDEBUG msg="DOCK_PROBE probe already docked, doing nothing"
        _CHECKPROBE action=query

    {% endif %}

    _EXIT_POINT function=DOCK_PROBE move={goback}

##===========================================================================
##============================= Probe Calibrate =============================
##===========================================================================
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _USER_VARIABLES"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _USER_VARIABLES"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KLICKYDEBUG msg="PROBE_CALIBRATE Axis homed"
    _KLICKYDEBUG msg="PROBE_CALIBRATE Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
    {% endif%}

    _CHECKPROBE action=query
    G90
    ATTACH_PROBE back=1
    STATUS_INITIALIZING

    _KLICKYDEBUG msg="PROBE_CALIBRATE calling klipper PROBE_CALIBRATE"
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    M118 moving the toolhead 20 mm from the bed
    _KLICKYDEBUG msg="PROBE_CALIBRATE Moving Z up by 20mm"
    TESTZ Z=20
    M118 remove manually the probe and continue calibration
    STATUS_READY

##===========================================================================
##============================== Probe Accuracy =============================
##===========================================================================
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set psamples = params.SAMPLES|default(10)|int %}
    {% set pretract = params.RETRACT|default(2)|int %}
    {% set pspeed = params.SPEED|default(5)|int %}
    {% set pretract_speed = params.RETRACT_SPEED|default(20)|int %}
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _USER_VARIABLES"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _USER_VARIABLES"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KLICKYDEBUG msg="PROBE_ACCURACY Axis homed"
    _KLICKYDEBUG msg="PROBE_ACCURACY Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"
    
    _ENTRY_POINT function=PROBE_ACCURACY

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
    {% endif%}

    _CHECKPROBE action=query
    ATTACH_PROBE back=1

    _KLICKYDEBUG msg="PROBE_ACCURACY calling klipper probe accuracy"
    _PROBE_ACCURACY SAMPLES={psamples} SAMPLE_RETRACT_DIST={pretract} PROBE_SPEED={pspeed} LIFT_SPEED={pretract_speed} {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE back=1                                          

    _EXIT_POINT function=PROBE_ACCURACY move=1

##===========================================================================
##================================ FORCE Move ===============================
##===========================================================================
[force_move]
enable_force_move: True

[gcode_macro FORCE]
gcode:
    SET_KINEMATIC_POSITION

##===========================================================================
##============================= Homing Override =============================
##===========================================================================
[homing_override]
axes: xyz
gcode:
    # collect user state variables
    _USER_VARIABLES
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _USER_VARIABLES"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set dock_on_zhome = printer["gcode_macro _USER_VARIABLES"].dock_on_zhome|default(True) %}
    {% set attachmove_x = printer["gcode_macro _USER_VARIABLES"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _USER_VARIABLES"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _USER_VARIABLES"].attachmove_z|default(0) %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set home_backoff_x = printer["gcode_macro _USER_VARIABLES"].home_backoff_x|default(0) %}
    {% set home_backoff_y = printer["gcode_macro _USER_VARIABLES"].home_backoff_y|default(0) %}
    {% set override_homing = printer["gcode_macro _USER_VARIABLES"].override_homing|default('') %}
    {% set backoff_speed = printer["gcode_macro _USER_VARIABLES"].backoff_speed * 60 %}
    {% set backoff_accel = printer["gcode_macro _USER_VARIABLES"].backoff_accel %}
    {% set move_accel = printer["gcode_macro _USER_VARIABLES"].move_accel|default(1000) %}

    #checks if the variable definitions are up to date
    _KLICKY_CHECK_VARIABLES_VERSION

    _CHECKPROBE action=query
    MOTORS_ON
    STATUS_INITIALIZING
    # reset parameters
    {% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

    {% if 'PROBE_LOCK' in params%}
        {% if verbose %}
            { action_respond_info("PROBE_LOCK = True") }
        {% endif %}
        {% set leave_probe_attached = True %}
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set home_x, home_y, home_z = True, True, True %}
        _KLICKYDEBUG msg="homing_override goint to home all axes"

    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
             _KLICKYDEBUG msg="homing_override goint to home X"

        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
            _KLICKYDEBUG msg="homing_override goint to home Y"
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
            _KLICKYDEBUG msg="homing_override goint to home Z"
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARIABLES reset=1
            _KLICKYDEBUG msg="homing_override goint to home all axes"
         {% endif %}

    {% endif %}

    _ENTRY_POINT function=homing_override
    STATUS_INITIALIZING

    # if Z is not homed, do not move the bed if it goes down
    {% if 'z' not in printer.toolhead.homed_axes %}
         {% if not enable_z_hop %} # Disables safe_z
            _KLICKYDEBUG msg="homing_override z_hop disabled"
            #preserve safe_z to use as the SET KINEMATIC Z position, so that the toolhead does not move to pick up the probe
            {% set kinematic_z = safe_z %}
            {% set safe_z = 0 %}
        {% endif %}
    {% endif %}

    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            {% if printer.toolhead.position.z < safe_z %}
                _KLICKYDEBUG msg="homing_override toolhead too low, with homed axes, raising it to {safe_z}mm"
                {% if verbose %}
                    { action_respond_info("moving to a safe Z distance") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            _KLICKYDEBUG msg="homing_override Z not homed, setting position as X=Y=0 Z={kinematic_z}"
            SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
            {% if printer.toolhead.position.z < safe_z %}
                _KLICKYDEBUG msg="homing_override toolhead too low, raising it to {safe_z}mm"
                {% if verbose %}
                    { action_respond_info("moving to a safe Z distance") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    # if the dock is oriented on the Y, first do Y endstop
    {% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
        # Home y
        {% if home_y %}
            {% if override_homing == 'Y' %}
              _KLICKYDEBUG msg="homing_override Y homing first override, due to override_homing = Y"
            {% else %}
              _KLICKYDEBUG msg="homing_override Y homing first override, due to attachmove_y = 0"
            {% endif %}
            {% if verbose %}
                { action_respond_info("Homing Y") }
            {% endif %}
            {% if printer["gcode_macro _HOME_Y"] is defined %}
                _KLICKYDEBUG msg="homing_override calling _HOME_Y external script to handle the Y homing"
                _HOME_Y
            {% else %}
                _KLICKYDEBUG msg="homing_override Homing Y G28 Y0"
                G28 Y0
                # does it need to back away from the home position
                {% if home_backoff_y != 0 %}
                    {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                        _KLICKYDEBUG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"
                        SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{backoff_speed}
                        SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                    {% else %}
                        _KLICKYDEBUG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
                        SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{backoff_speed}
                        SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                    {%endif %}
                {%endif %}
            {% endif %}
        {% endif %}
        {% set home_y = False %}
    {% endif %}

    # Home x
    {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        {% if printer["gcode_macro _HOME_X"] is defined %}
            _KLICKYDEBUG msg="homing_override calling _HOME_X external script to handle the X homing"
            _HOME_X
        {% else %}
            _KLICKYDEBUG msg="homing_override Homing X, G28 X0"
            G28 X0
            # does it need to back away from the home position
            {% if home_backoff_x != 0 %}
                {% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
                    _KLICKYDEBUG msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"
                    SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                    G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{backoff_speed}
                    SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                {% else %}
                    _KLICKYDEBUG msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"
                    SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                    G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{backoff_speed}
                    SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        {% if printer["gcode_macro _HOME_Y"] is defined %}
            _KLICKYDEBUG msg="homing_override calling _HOME_Y external script to handle the Y homing"
            _HOME_Y
        {% else %}
            _KLICKYDEBUG msg="homing_override Homing Y, G28 Y0"
            G28 Y0
            {% if home_backoff_y != 0 %}
                {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                    _KLICKYDEBUG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"
                    SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{backoff_speed}
                    SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                {% else %}
                    _KLICKYDEBUG msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"
                    SET_VELOCITY_LIMIT ACCEL={backoff_accel} ACCEL_TO_DECEL={backoff_accel}
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{backoff_speed}
                    SET_VELOCITY_LIMIT ACCEL={move_accel} ACCEL_TO_DECEL={move_accel}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}
    # Home z
    {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # if probe is configured as endstop, attach it, else check if the probe needs to be docked if attached
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            _KLICKYDEBUG msg="homing_override probe configured as a virtual Z endstop attaching probe"                    
            ATTACH_PROBE
            # if PROBE_LOCK parameter is given, Attach Probe and lock until it´s unlocked
            {% if leave_probe_attached %}
                _PROBE_LOCK
            {% endif %}
        {% elif dock_on_zhome == True %}
            DOCK_PROBE
        {% endif %}

        _HOME_Z

        # if probe is configured as endstop, dock it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            _KLICKYDEBUG msg="homing_override probe no longer required, docking probe"                    
            DOCK_PROBE
        {% elif dock_on_zhome == False %}
            DOCK_PROBE
        {% endif %}
    {% endif %}
    _CHECKPROBE action=query

    # park the toolhead
    _PARK_TOOLHEAD

    _EXIT_POINT function=homing_override
    STATUS_READY

# Umbilical path setup
[gcode_macro _UMBILICAL_PATH]
gcode:
    {% set umbilical = printer["gcode_macro _USER_VARIABLES"].umbilical %}
    {% set umbilical_x = printer["gcode_macro _USER_VARIABLES"].umbilical_x %}
    {% set umbilical_y = printer["gcode_macro _USER_VARIABLES"].umbilical_y %}
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% if umbilical %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
        _ENTRY_POINT function=Umbilical_Path

        _KLICKYDEBUG msg="_UMBILICAL_PATH moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"
        G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}

        _EXIT_POINT function=Umbilical_Path
    {% endif %}

# Home Z Routine
[gcode_macro _HOME_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _PROBE_VARIABLES"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _PROBE_VARIABLES"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _USER_VARIABLES"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    _ENTRY_POINT function=Home_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        _KLICKYDEBUG msg="_HOME_Z XY Axis homed"
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
             _KLICKYDEBUG msg="_HOME_Z Z not homed, setting position as X=Y=Z=0"
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        _KLICKYDEBUG msg="_HOME_Z moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        _KLICKYDEBUG msg="_HOME_Z Homing Z G28 Z" 
        G28 Z0
        _KLICKYDEBUG msg="_HOME_Z toolhead too low, raising it to {safe_z}mm" 
        G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

    _EXIT_POINT function=Home_Z

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CHECKPROBE]
variable_probe_state: 0
gcode:
    Query_Probe
    _SETPROBESTATE action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SETPROBESTATE]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro _PARK_TOOLHEAD]
gcode:
    {% set park_toolhead = printer["gcode_macro _USER_VARIABLES"].park_toolhead %}
    {% set parkposition_x = printer["gcode_macro _USER_VARIABLES"].parkposition_x %}
    {% set parkposition_y = printer["gcode_macro _USER_VARIABLES"].parkposition_y %}
    {% set parkposition_z = printer["gcode_macro _USER_VARIABLES"].parkposition_z %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    _ENTRY_POINT function=Park_Toolhead

    {% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
        {% if verbose %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        {% if parkposition_z == -128 %}
            _KLICKYDEBUG msg="_PARK_TOOLHEAD moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"
            G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}
            
        {% else %}
        
            _KLICKYDEBUG msg="_PARK_TOOLHEAD moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"
            G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
            
        {% endif %}
        
    {% endif %}
    _EXIT_POINT function=Park_Toolhead