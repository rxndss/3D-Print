##===========================================================================
##================================= Bed Mesh ================================
##===========================================================================
    # Fade start = 5th layer from bottom
        # First layer height :  0.25 mm
        # Base layer height :   0.20 mm
        # fade_start = 0.25 + (0.20 * 4)

    # Relative reference index = ((XProbeCount * YProbeCount) - 1) / 2
        # Example,
        # XProbeCount = 9, YProbeCount = 9
        # RRI = ((9 * 9) - 1) / 2
##===========================================================================
[bed_mesh]
speed: 350
horizontal_move_z: 10
mesh_min: 12, 12
mesh_max: 338, 338
probe_count: 9, 9
fade_start: 1.05
fade_end: 2
fade_target: 0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
relative_reference_index: 40

##--------------------------------- Commands --------------------------------
##============================ Bed Mesh Calibrate ===========================
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    STATUS_CALIBRATE
    G90

    {action_respond_info("Bed mesh calibrate")}

    ATTACH_PROBE

    _BED_MESH_CALIBRATE {% for p in params
                        %}{'%s=%s ' % (p, params[p])}{%
                        endfor %}

    DOCK_PROBE
    STATUS_READY

##============================ Adaptive Bed Mesh ============================
[gcode_macro ADAPTIVE_BED_MESH]
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_mesh_area_offset : 5.0
variable_probe_samples : 1
variable_min_probe_count : 3
variable_probe_count_scale_factor : 1.0
variable_enable_reference_index : True
gcode:
    STATUS_CALIBRATE
    G90

    ATTACH_PROBE

    {% if params.AREA_START and params.AREA_END %}
        {% set bedmeshconfig = printer["configfile"].config["bed_mesh"] %}
        {% set bedmeshconfig = printer.configfile.config["bed_mesh"] %}
        {% set safe_min_x = bedmeshconfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedmeshconfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedmeshconfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedmeshconfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
        {% set area_min_y = params.AREA_START.split(",")[1]|float %}
        {% set area_max_x = params.AREA_END.split(",")[0]|float %}
        {% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% if bedmeshconfig.probe_count.split(",")|length == 2 %}
            {% set meshpointx = bedmeshconfig.probe_count.split(",")[0]|int %}
            {% set meshpointy = bedmeshconfig.probe_count.split(",")[1]|int %}

        {% else %}
            {% set meshpointx = bedmeshconfig.probe_count.split(",")[0]|int %}
            {% set meshpointy = bedmeshconfig.probe_count.split(",")[0]|int %}
        {% endif %}

        {% set meshmaxpointx = meshpointx %}
        {% set meshmaxpointy = meshpointy %}

        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}

            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}

            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}

            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}

            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshpointx = (meshpointx * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}

            {% if meshpointx < min_probe_count %}
                {% set meshpointx = min_probe_count %}
            {% endif %}

            {% if meshpointx > meshmaxpointx %}
                {% set meshpointx = meshmaxpointx %}
            {% endif %}

            {% set meshpointy = (meshpointy * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}

            {% if meshpointy < min_probe_count %}
                {% set meshpointy = min_probe_count %}
            {% endif %}

            {% if meshpointy > meshmaxpointy %}
                {% set meshpointy = meshmaxpointy %}
            {% endif %}

            {% set algorithm = "lagrange" %}

            {% if "algorithm" in bedmeshconfig and meshpointx >=4 and meshpointy >=4 %}
                {% set algorithm = bedmeshconfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = ((meshpointx * meshpointy) - 1) / 2|int %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshpointx},{meshpointy} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}

            {% else %}
                BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshpointx},{meshpointy} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}

        {% else %}
            BED_MESH_CALIBRATE
        {% endif %}
        
    {% else %}
        BED_MESH_CALIBRATE
    {% endif %}

    DOCK_PROBE
    STATUS_READY
##=================================== End ===================================