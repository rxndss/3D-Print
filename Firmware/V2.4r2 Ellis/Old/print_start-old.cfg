######################### PRINT START / END #########################

# !! My print_start is only split into two parts because of my junky M191 macro. There is no reason to do this otherwise. 
# !! This is why I have some weird variable passing between the two print_starts. Just ignore it.

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:		
	# Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.HOTEND|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}

	# Set the parameters as persistent variables so they can be referenced in PRINT_START2 and elsewhere 
	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}	
	
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  													; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      												; cancel off timer (if there is one)
	SET_PIN PIN=caselight VALUE=1																		; turn on case light
	RESETSPEEDS																							; reset speed, accel etc to configured values
	RESETRGB																							; reset LCD RGB
	M104 S140																							; set hotend to no-ooze temp
	M140 S{bed}																							; set bed to target temp
	G28																									; home
	G90																									; absolute positioning
	{% if not printer["temperature_sensor chamber"].temperature >= chamber %}		
		{ action_respond_info("Chamber not at temp yet, pausing...") }									; - if chamber is not at temp yet:
		HEATSOAK T={bed} MOVE=1																			; heatsoak and park in center
		M190 S{bed} 																					; wait for bed final temp
		M191 S{chamber}																					; wait for chamber final temp, start PRINT_START2 when reached
	{% else %}
		{ action_respond_info("Chamber at or above temp.") }
		{% if printer.heater_bed.temperature < (bed - 2) %}												; - if chamber is already at temp, but bed is not fully heated:
			HEATSOAK T={bed} MOVE=1																		; heatsoak and park
			M190 S{bed} 																				; wait for bed final temp
		{% else %}																						; - if chamber + bed are already at temp:
			HEATSOAK T={bed} MOVE=0																		; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
		PRINT_START2																					; if at temp, continue print_start (part 2)
	{% endif %}	

# !! As mentioned above, only split into two parts because of my junky M191 macro. There is no need to do this otherwise.
[gcode_macro PRINT_START2]
gcode:
	M106 S0																								; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																						; clear bed mesh
	ATTACH_PROBE_LOCK																					; attach klicky
	QUAD_GANTRY_LEVEL																					; quad gantry level
	G28 Z																								; home z
	G90 													 											; absolute positioning
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500					; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
	BED_MESH_CALIBRATE																					; mesh
	G28 Z																								; home z again
	G0 Z20																								; hop up to prevent knocking probe off after homing Z
	DOCK_PROBE_UNLOCK																					; stow probe, unlock
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500												; move to right of nozzle brush
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 											; set & wait for hotend final temp
	CLEANNOZZLE																							; clean nozzle while hot
	TEMPADJUSTPA																						; change PA based on bed temp
	CALIBRATE_Z																							; calibrate z offset with hot nozzle
	SWIPENOZZLE																							; swipe nozzle brush on way to print purge line
	#SET_FAN_SPEED FAN=Exhaust SPEED=0.1																	; set chamber fan to 10%
	G92 E0                              																; reset Extruder
	G1 X0 Y20 Z0.3 F19500.0           																	; move to start position
	G1 X0 Y200.0 Z0.3 F1500.0 E15     																	; draw the first line
	G92 E0                              																; reset Extruder
	G1 Z2.0 F3000                       																; move Z Axis up
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1													; enable filament sensor
	
######################### CHAMBER TEMP WAIT #########################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts. 
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}		   							; set target temp for reference outside of the macro (for the loop)
						
	{% if not printer["temperature_sensor chamber"].temperature >= s|float %}						; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		{ action_respond_info("Chamber not at temp yet, pausing...") }					
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   							; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   							; start wait loop
	{% else %}					
		{ action_respond_info("Chamber at or above temp, continuing...") }     							; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   							; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% if printer["temperature_sensor chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		{ action_respond_info("Chamber at or above temp, continuing...") }
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		{ action_respond_info("Chamber not at temp yet, waiting...") }
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   											 ; continue waiting loop
	{% endif %}
	
######################### SAFETY #########################

## Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
#[gcode_macro LOWERCURRENT]
#gcode:
#	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
#	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
#	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
#	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
#	
## Returns z steppers back to their currents specified in the config.
#[gcode_macro RESETCURRENT]
#gcode:
#	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
#	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
#	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
#	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	